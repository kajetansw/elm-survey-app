-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module SurveyAPI.InputObject exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import SurveyAPI.Interface
import SurveyAPI.Object
import SurveyAPI.Scalar
import SurveyAPI.ScalarCodecs
import SurveyAPI.Union


buildQuestionInput :
    QuestionInputRequiredFields
    -> QuestionInput
buildQuestionInput required =
    { text = required.text, answer = required.answer }


type alias QuestionInputRequiredFields =
    { text : String
    , answer : String
    }


{-| Type for the QuestionInput input object.
-}
type alias QuestionInput =
    { text : String
    , answer : String
    }


{-| Encode a QuestionInput into a value that can be used as an argument.
-}
encodeQuestionInput : QuestionInput -> Value
encodeQuestionInput input =
    Encode.maybeObject
        [ ( "text", Encode.string input.text |> Just ), ( "answer", Encode.string input.answer |> Just ) ]


buildSurveyInput :
    SurveyInputRequiredFields
    -> SurveyInput
buildSurveyInput required =
    { date = required.date, questions = required.questions }


type alias SurveyInputRequiredFields =
    { date : SurveyAPI.ScalarCodecs.Time
    , questions : List (Maybe QuestionInput)
    }


{-| Type for the SurveyInput input object.
-}
type alias SurveyInput =
    { date : SurveyAPI.ScalarCodecs.Time
    , questions : List (Maybe QuestionInput)
    }


{-| Encode a SurveyInput into a value that can be used as an argument.
-}
encodeSurveyInput : SurveyInput -> Value
encodeSurveyInput input =
    Encode.maybeObject
        [ ( "date", (SurveyAPI.ScalarCodecs.codecs |> SurveyAPI.Scalar.unwrapEncoder .codecTime) input.date |> Just ), ( "questions", (encodeQuestionInput |> Encode.maybe |> Encode.list) input.questions |> Just ) ]
